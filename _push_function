#include "monty.h"
/**
 *_push- pushes a new element to the top of a stack
 *@stack: pointer too pointer of stack structure
 *@line_number: line at which instruction appears
 *Return: void
 */

void _push(stack_t **stack, unsigned int line_number, int value)
{

stack_t *new_element;

new_element = malloc(sizeof(stack_t));
if (new_element == NULL)
exit(EXIT_FAILURE);

new_element->n = value;
new_element->next = NULL;
new_element->prev = NULL;
  
if (*stack == NULL)
*stack = new_element;

else
{
(*stack)->prev = new_element;
new_element->next = *stack;
*stack = new_element;
}

}

/**
 *_pall- prints all elements of stack
 *@stack: pointer to first element on stack
 *@line_number: the line on which error occurs
 *Return: void
 */

void _pall(stack_t **stack, unsigned int line_number)
{
stack_t *temp = *stack;
  
if (temp == NULL)
return;

while (temp != NULL)
{
printf("%d\n", temp->n);
temp = temp->next;
}


}

/**
*get_opcode_function- gets the function associated with the opcode
*@opcode: the operation code
*@value: element to be pushed in using the opcode
*Return: void
*/

void get_opcode_function(stack_t **stack, unsigned int line_number, char *opcode, *int value)
{

if (strcmp(opcode, "push") == 0)
_push(stack, line_number, value);

else if (strcmp(opcode, "pall"))
_pall(stack);

else

}